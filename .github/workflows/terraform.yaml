  name: Deploy Infrastructure
  on:
    push:
      branches:
        - main
  jobs:
    tf_fmt:
      name: Terra-exmp
      runs-on: ubuntu-latest
      steps:
        - uses: hashicorp/setup-terraform@v2
          with:
            cli_config_credentials_hostname: terraform.example.com
            cli_config_credentials_token: ${{ secrets.MY_NEW_TF_TOKEN }}
        - name: Checkout Repo
          uses: actions/checkout@v1
        - name: Terraform Init
          uses: hashicorp/terraform-github-actions/init@v0.4.0
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            run: terraform init -var-file="var.tfvars" 
        - name: Terrafor Plan
          uses: hashicorp/terraform-github-actions/plan@v0.3.7
          
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            TF_VAR_IMAGE_ID: "ami-09d95fab7fff3776c"
            TF_VAR_INSTANCE_TYPE: "t2.micro"
            TF_VAR_KEY_NAME: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
            run: terraform plan -var-file="var.tfvars" 
              args: '-var-file="dev.tfvars"'
        - name: Terraform Apply
          uses: hashicorp/terraform-github-actions/apply@v0.4.0
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            TF_VAR_IMAGE_ID: "ami-09d95fab7fff3776c"
            TF_VAR_INSTANCE_TYPE: "t2.micro"
            TF_VAR_KEY_NAME: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
            run: terraform apply -var-file="var.tfvars" 

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:

# permissions:
#   contents: read


# jobs:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3
    
#     # steps:
#     # - name: Install Terraform
#     #   run: |
#     #     wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
#     #     echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
#     #     sudo apt update && sudo apt install terraform
#     steps:
#     - uses: hashicorp/setup-terraform@v2
#         with:
#         cli_config_credentials_token: ${{ secrets.MY_NEW_TF_TOKEN }}
#     - name: Terraform fmt
#         #id: fmt
#         run: terraform fmt -check
#         continue-on-error: true    
#     - name: Terraform Init
#     with:
#         cli_config_credentials_token: ${{ secrets.MY_NEW_TF_TOKEN }}
#     env:
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     run: terraform init  -input=false
#     - name: Terraform Plan
#     with:
#         cli_config_credentials_token: ${{ secrets.MY_NEW_TF_TOKEN }}
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform plan -varfile=var.tfvars -input=false
#       - run: echo ${{ steps.plan.outputs.stdout }}
#       - run: echo ${{ steps.plan.outputs.stderr }}
#       - run: echo ${{ steps.plan.outputs.exitcode }}
    
#     - name: Terraform Apply
#     with:
#         cli_config_credentials_token: ${{ secrets.MY_NEW_TF_TOKEN }}
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform apply -varfile=var.tfvars -auto-approve -input=false
#       - run: echo ${{ steps.apply.outputs.stdout }}
#       - run: echo ${{ steps.apply.outputs.stderr }}
#       - run: echo ${{ steps.apply.outputs.exitcode }}
# # steps:
# #     - uses: hashicorp/setup-terraform@v2

# # steps:
# # - uses: hashicorp/setup-terraform@v2
# #   with:
# #     terraform_version: "1.1.7"

